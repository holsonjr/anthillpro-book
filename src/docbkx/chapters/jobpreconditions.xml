<chapter>
	<title>Job Pre-Conditions</title>
	<section>
		<title>Overview</title>
		<para>Job Pre-Conditions Scripts let you control which Jobs within a Workflow run and which
			are skipped. There are a number of situations where this kind of control comes in
			handy:</para>
		<itemizedlist>
			<listitem>
				<para>You have a large number of projects that use the same Build Workflow but some
					of these projects have documentation that needs to deployed while others don’t.
					Rather than maintain two separate Build Workflows with only one difference you
					can use a Job Pre-Condition Script that only runs a Documentation Deploy Job for
					projects that supply a documentation artifact.</para>
			</listitem>
			<listitem>
				<para>You need to automatically clear out the database only when deploying to the QA
					environment, but not to any other environment.</para>
			</listitem>
			<listitem>
				<para>Deployers want to be able to choose, at Deploy time, which artifacts get
					deployed.</para>
			</listitem>
		</itemizedlist>
		<para>This document aims to give you an overview of how Job Pre-Conditions work and how to
			write your own.</para>
	</section>
	<section>
		<title>Creating Job Pre-Condition Scripts</title>
		<para>To create Job Pre-Conditions you'll need access to the System tab. See the official
			AHP documentation for information on managing permissions.</para>
		<para>To create a new Job Pre-Condition:</para>
		<orderedlist>
			<listitem>
				<para>Log into AHP</para>
			</listitem>
			<listitem>
				<para>Click on the "System" tab</para>
			</listitem>
			<listitem>
				<para>In the "Script Library" section click “Job Pre-Condition”</para>
			</listitem>
			<listitem>
				<para>Click "Create New"</para>
			</listitem>
			<listitem>
				<para>Enter a "Name"</para>
			</listitem>
			<listitem>
				<para>Enter a "Description"</para>
			</listitem>
			<listitem>
				<para>Choose a "Script Group"</para>
			</listitem>
			<listitem>
				<para>Choose a "Language" (Beanshell for the provided examples)</para>
			</listitem>
			<listitem>
				<para>Enter the "Script"</para>
			</listitem>
			<listitem>
				<para>Click Save</para>
			</listitem>
		</orderedlist>
	</section>
	<section>
		<title>Job Pre-Condition Criteria Objects</title>
		<para>As the description above the "Script" text area states, the script needs to return a
			Criteria object. AntHill Pro will take the Criteria object you return and call its
			“matches” method. If the method returns true the Job will be run. If it returns false,
			the Job will be skipped.</para>
		<section>
			<title>Which Criteria Class?</title>
			<para>A quick look at the AntHill Pro Remoting API might lead you to believe you're
				working with the Criteria class listed there, but that class lives in
				com.urbancode.anthill3.domain.script.agentfilter.criteria.</para>
			<para>For Job Pre-Conditions you want the Criteria class in the package in
				com.urbancode.logic. This class is not listed in the Remoting or Scripting APIs.
				However two of its subclasses are:<itemizedlist>
					<listitem>
						<para>com.urbancode.anthill3.domain.script.job.JobStatus</para>
					</listitem>
					<listitem>
						<para>com.urbancode.anthill3.domain.script.job.Property</para>
					</listitem>
				</itemizedlist></para>
		</section>
		<section>
			<title>JobStatus Class</title>
			<para>JobStatus provides a number of static methods that look at the status of other
				jobs in the current workflow. You can look at the status of:</para>
			<itemizedlist>
				<listitem>
					<para>All the Jobs in the workflow</para>
				</listitem>
				<listitem>
					<para>Ancestor Jobs - Jobs that occurred before the current one, if any</para>
				</listitem>
				<listitem>
					<para>Parent Job - The Job immediately before the current one, if any</para>
				</listitem>
				<listitem>
					<para>Iterated Jobs - Completed Jobs in the same iteration as the current Job,
						if any</para>
				</listitem>
				<listitem>
					<para>Completed Jobs - All jobs that have run in the workflow, regardless of
						their “ancestry”</para>
				</listitem>
			</itemizedlist>
			<para>Additionally, you can base your decision if a job has one particular status or if
				its status is in an array of acceptable statuses.</para>
			<section>
				<title>JobStatusEnum</title>
				<para>Before we continue, we need to talk about the status of Jobs. After Jobs are
					executed (or skipped because of a Job Pre-condition) they are give one of the
					following statuses from the JobStatusEnum enumeration:</para>
				<table>
					<title>JobStatusEnum</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="c1" colwidth="1.0*"/>
						<colspec colnum="2" colname="c2" colwidth="3.0*"/>
						<thead>
							<row>
								<entry>Status</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>SUCCESS</entry>
								<entry>The job was run successfully.</entry>
							</row>
							<row>
								<entry>SUCCESS_WARN</entry>
								<entry>Dependencies were resolved but the Workflow is configured to
									warn on conflict.</entry>
							</row>
							<row>
								<entry>FAILED</entry>
								<entry>The job was run but failed.</entry>
							</row>
							<row>
								<entry>ABORTED</entry>
								<entry>The job was run but aborted by a user.</entry>
							</row>
							<row>
								<entry>TIMED_OUT</entry>
								<entry>The job was run but took longer than the Job’s timeout
									period.</entry>
							</row>
							<row>
								<entry>NOT_NEEDED</entry>
								<entry>The job was determined to be not needed by a Job
									Pre-condition and skipped.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section>
				<title>JobStatus Static Methods</title>
				<para>Here are all the static methods of the JobStatus class, ordered by Job scope
					and parameter type:</para>
				<table>
					<title>JobStatus Static Methods</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="c1" colwidth="1.0*"/>
						<colspec colnum="2" colname="c2" colwidth="3.0*"/>
						<thead>
							<row>
								<entry>Method</entry>
								<entry>Creates a JobStatus Criteria that matches if...</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>allAncestorsAre(status)</entry>
								<entry>all the ancestor job(s) have the specified status or there
									are no ancestor jobs.</entry>
							</row>
							<row>
								<entry>anyAncestorIs(status)</entry>
								<entry>any ancestor job has the specified status.</entry>
							</row>
							<row>
								<entry>allAncestorsIn(statuses)</entry>
								<entry>all the ancestor job(s) have a status that matches one of the
									specified statuses or there are no ancestor jobs.</entry>
							</row>
							<row>
								<entry>anyAncestorIn(statuses)</entry>
								<entry>any ancestor job has a status that matches one of the
									specified statuses.</entry>
							</row>
							<row>
								<entry>allCompletedAre(status)</entry>
								<entry>all the completed jobs in the current workflow have the
									specified status or there are no completed jobs</entry>
							</row>
							<row>
								<entry>anyCompletedIs(status)</entry>
								<entry>any one of the completed jobs in the current workflow has the
									specified status.</entry>
							</row>
							<row>
								<entry>allCompletedIn(statuses)</entry>
								<entry>all the completed jobs in the current workflow has a status
									that matches one of the specified statuses or there are no
									completed jobs.</entry>
							</row>
							<row>
								<entry>anyCompletedIn(statuses)</entry>
								<entry>any one of the completed jobs in the current workflow have a
									status that matches one of the specified statuses.</entry>
							</row>
							<row>
								<entry>allIteratedAre(status)</entry>
								<entry>all the completed jobs of the current job iteration in the
									current workflow have the specified status or there are no
									jobs.</entry>
							</row>
							<row>
								<entry>anyIteratedAre(status)</entry>
								<entry>any one of the completed jobs of the current job iteration in
									the current workflow has the specified status.</entry>
							</row>
							<row>
								<entry>allIteratedIn(statuses)</entry>
								<entry>all the completed jobs of the current job iteration in the
									current workflow have a status that matches one of the specified
									statuses or there are no jobs.</entry>
							</row>
							<row>
								<entry>anyIteratedIn(statuses)</entry>
								<entry>any one of the completed jobs of the current job iteration in
									the current workflow have a status that matches one of the
									specified statuses.</entry>
							</row>
							<row>
								<entry>parentsAre(status)</entry>
								<entry>all the immediate parent job(s) have the specified status or
									there are no immediate parent jobs.</entry>
							</row>
							<row>
								<entry>anyParentIs(status)</entry>
								<entry>any one of the immediate parent job(s) have the specified
									status.</entry>
							</row>
							<row>
								<entry>parentsIn(statuses)</entry>
								<entry>all the immediate parent job(s) have a status that matches
									one of the specified statuses or there are no immediate parent
									jobs.</entry>
							</row>
							<row>
								<entry>anyParentIn(statuses)</entry>
								<entry>all the immediate parent job(s) have the specified status or
									there are no immediate parent jobs.</entry>
							</row>
							<row>
								<entry>allAre(status)</entry>
								<entry>all the jobs in the current workflow except the current job
									have the specified status or there are no other jobs.</entry>
							</row>
							<row>
								<entry>anyAre(status)</entry>
								<entry>any one of the jobs in the current workflow except the
									current job has the specified status.</entry>
							</row>
							<row>
								<entry>allIn(statuses) </entry>
								<entry>all the jobs in the current workflow except the current job
									have a status that matches one of the specified statuses or
									there are no other jobs.</entry>
							</row>
							<row>
								<entry>anyIn(statuses) </entry>
								<entry>any one of the jobs in the current workflow except the
									current job have a status that matches one of the specified
									statuses.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>Methods that accept a single status can be called as such:</para>
				<programlisting><![CDATA[JobStatus.allAncestorsAre(JobStatusEnum.SUCCESS)]]></programlisting>
				<para>And methods that accept multiple statuses can be called like this:</para>
				<programlisting><![CDATA[return JobStatus.allAncestorsIn(new JobStatusEnum[] {
	  JobStatusEnum.SUCCESS,
	  JobStatusEnum.NOT_NEEDED
	})]]></programlisting>
				<para>Note that parentsAre and parentsIn don't follow the method naming convention
					exactly. They should probably be called allParentsAre and allParentsIn.</para>
			</section>
			<section>
				<title>Job Ancestry</title>
				<para>If you’re unclear as to the different types of Job scope, the diagram and
					chart below should help you understand:</para>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="../../target/graphviz/job-ancestry.png"
							wordsize=""/>
					</imageobject>
				</mediaobject>
			</section>
		</section>
		<section>
			<title>Property Class</title>
			<para>Sometimes you want to control the execution of Jobs with properties. This is where
				the Property class steps in. You’ll be using the one in
					<code>com.urbancode.anthill3.domain.script</code>, not the one in
					<code>com.urbancode.anthill3.domain.property</code>.</para>
			<para>From the Remoting API: “A Criteria for making decisions base on properties and
				property values in the current context. The properties are looked up using
				PropertyEvaluator so the things holding properties that are examined are determined
				where this is executed and what is in the context.”</para>
			<section>
				<title>Property Static Methods</title>
				<para>Property provides a number of static methods that can tell you if a property
					exists, if it has a certain value, if it’s value is in a list of values or if
					the value matches a regular expression. Note: propName is always a String, value
					is a String and values is an Array of Strings.</para>
				<table>
					<title>Property Class Static Methods</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="c1" colwidth="1.0*"/>
						<colspec colnum="2" colname="c2" colwidth="3.0*"/>
						<thead>
							<row>
								<entry>Method</entry>
								<entry>Create a Criteria that only returns true if...</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>exists(propName)</entry>
								<entry>the named property is defined.</entry>
							</row>
							<row>
								<entry>notExists(propName)</entry>
								<entry>the named property is not defined.</entry>
							</row>
							<row>
								<entry>in(propName, values)</entry>
								<entry>the named property is defined and has the exact value as one
									of the given values.</entry>
							</row>
							<row>
								<entry>notIn(propName, values)</entry>
								<entry>the named property is not defined or the property is defined
									and its value is not the exact value of one of the given
									values.</entry>
							</row>
							<row>
								<entry>is(propName, value)</entry>
								<entry>the named property is defined and has the exact given
									value.</entry>
							</row>
							<row>
								<entry>not(propName, value)</entry>
								<entry>the named property is not defined or the property is defined
									and its value is not the exact given value.</entry>
							</row>
							<row>
								<entry>like(propName, value)</entry>
								<entry>the named property is defined and the property value matches
									the regular expression given.</entry>
							</row>
							<row>
								<entry>like(propName, values)</entry>
								<entry>the named property is defined and the property value matches
									on of the regular expressions given.</entry>
							</row>
							<row>
								<entry>notLike(propName, value)</entry>
								<entry>the named property is not defined or the property is defined
									and its value does not match the regular expression
									given.</entry>
							</row>
							<row>
								<entry>notLike(propName, values)</entry>
								<entry>the named property is not defined or the property is defined
									and its value does not match the regular expressions
									given.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
		</section>
		<section>
			<title>Logic</title>
			<para>Often you will need to combine the results of JobStatus and Property calls. The
				Logic class provides a few static methods to help you do this. Unfortunately this is
				another class that does appear in the public APIs - it comes from a dependency of
				AntHill Pro, not AHP itself.</para>
			<section>
				<title>Logic Static Methods</title>
				<para>Here are the static methods it provides:</para>
				<table>
					<title>Property Class Static Methods</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="c1" colwidth="1.0*"/>
						<colspec colnum="2" colname="c2" colwidth="1.0*"/>
						<thead>
							<row>
								<entry>Method</entry>
								<entry>Create a Criteria that only returns true if...</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>Logic.or(Criteria a, Criteria b)</entry>
								<entry>either a or b matches.</entry>
							</row>
							<row>
								<entry>Logic.or(Criteria[] a)</entry>
								<entry>any of the criteria matches.</entry>
							</row>
							<row>
								<entry>Logic.and(Criteria a, Criteria b)</entry>
								<entry>both a and b match.</entry>
							</row>
							<row>
								<entry>Logic.and(Criteria[] a)</entry>
								<entry>all of the criteria match.</entry>
							</row>
							<row>
								<entry>Logic.not(Criteria a)</entry>
								<entry>a does not match.</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>This is very useful for Jobs beyond the first one in the workflow where we
					care about the jobs that ran before the current one. For example, we may want to
					run a particular Job if a property is set to true AND if all previous Jobs were
					successful as well. For that we can use Logic.and to check the Criteria objects
					returned by both JobStatus and Property methods.</para>
				<screen>Logic.and(
 JobStatus.allAncestorsIn(new JobStatusEnum[] {
   JobStatusEnum.SUCCESS, JobStatusEnum.NOT_NEEDED
 }),
 Property.is("deploy-admin", "true")
);</screen>
			</section>
		</section>
	</section>
	<section>
		<title>Custom Criteria Classes</title>
		<para>AntHill Pro comes with a number of Job Pre-Condition Scripts already set up that cover
			most of the common scenarios regarding Job Stauses. If you need to support logic outside
			of what JobStatus and Property provide then you need to make your own Criteria class.
			You can do this by creating one on the fly and returning it in your script. You need
			only implement a method named matches(Object) which needs to return a boolean.</para>
		<programlisting><![CDATA[return new Criteria() {
  public boolean matches(Object obj) {
    return true; // or false...
  }
}]]></programlisting>
		<para>Return "true" if you want the Job in question to run. The Job will run and return one
			of the JobStatusEnum values other than NOT_NEEDED, depending on its success. Return
			"false" if you want it to be skipped. It will be given the status
			JobStatusEnum.NOT_NEEDED.</para>
	</section>
	<section>
		<title>Combining Stock and Custom Criteria Classes</title>
		<para>Just as you might want to combine a JobStatus and Property Criteria class, you might
			want to combine them with your own Custom Criteria, or multiple Custom Criterias. This
			is another place you can make use of the Logic static methods.</para>
		<programlisting><![CDATA[Logic.and(
  new Criteria() {
    public boolean matches(Object obj) {
      return true; // Or false!
      );
    }
  },
  StepStatus.allPriorIn(new JobStatusEnum[] {
    JobStatusEnum.SUCCESS,
    JobStatusEnum.SUCCESS_WARN
  })
)]]></programlisting>
	</section>
	<section>
		<title>Context Is King</title>
		<para>So it’s great that you can use the stock Criteria classes, create you own custom ones,
			and even combine them in various ways, but often you will need to base your decision on
			information beyond only the status of other jobs and the value of properties.</para>
		<para>Several "Lookup" classes provide a getCurrent() method that returns an object in the
			context of the currently running Workflow that can help you create your own logic. Here
			are a few that might be useful:</para>
		<table>
			<title>Lookup Classes and Methods</title>
			<tgroup cols="2">
				<colspec colnum="1" colname="c1" colwidth="2.0*"/>
				<colspec colnum="2" colname="c2" colwidth="1.0*"/>
				<thead>
					<row>
						<entry>Static Method</entry>
						<entry>Return Object Class</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>BuildLifeLookup.getCurrent()</entry>
						<entry>BuildLife</entry>
					</row>
					<row>
						<entry>BuildRequestLookup.getCurrent()</entry>
						<entry>BuildRequest</entry>
					</row>
					<row>
						<entry>EnvironmentLookup.getCurrent()</entry>
						<entry>ServerGroup</entry>
					</row>
					<row>
						<entry>JobTraceLookup.getCurrent()</entry>
						<entry>JobTrace</entry>
					</row>
					<row>
						<entry>ProjectLookup.getCurrent()</entry>
						<entry>Project</entry>
					</row>
					<row>
						<entry>ServerSettingsLookup.getCurrent()</entry>
						<entry>ServerSettings</entry>
					</row>
					<row>
						<entry>SourceConfigLookup.getCurrent()</entry>
						<entry>SourceConfig</entry>
					</row>
					<row>
						<entry>WorkflowLookup.getCurrent()</entry>
						<entry>Workflow</entry>
					</row>
					<row>
						<entry>WorkflowLookup.getCurrentCase()</entry>
						<entry>WorkflowCase</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>The Scripting API lists a number of other methods for these Lookup classes so it’s
			worth looking through the documentation for others.</para>
	</section>
</chapter>
